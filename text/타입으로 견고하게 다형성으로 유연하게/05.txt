# 2장 서브타입에 의한 다형성

## 2.2 집합론적 타입 (set-theoretic type)

* 서브타입에 의한 다형성을 바탕으로 만들어진 유용한 타입들.
  → 최대 타입, 최소 타입, 이거나 타입, 이면서 타입.
  → 전체 집합, 공집합, 합집합, 교집합으로부터 유래.

* 최대 타입 (top type)
  * ‘가장 큰’타입 = 모든 값을 포함하는 타입
  * 모든 타입은 최대 타입의 서브타입이다.
  * 매개변수를 최대 타입 (Any)로 정의하면 아무 값이나 인자로 받을 수 있음. ex) Void print(Any value){...}
  * 만들기 쉬움. 아무 값이나 결과로 낼 수 있다. = 특별한 능력을 요구하지 않는 곳에만 사용해야 함.

* 최소 타입 (bottom type)
  * 예외를 다루는 데 유용한 타입
    * error : 항상 예외 발생, 언제나 계산을 끝내지 못하는 함수.
         : error를 어디서든 호출할 수 있는 이유 = error가 계산이 끝나지 않는 함수이기 때문.
  * 어떤 값도 속하지 않는 타입. ‘가장 작은’ 타입. ‘계산을 끝마치지 못한다’.를 표현할 수 있는 타입.
  *  Void와 최소 타입의 차이
    * Void : 계산을 끝낼 때 아무 값도 반환하지 않는다는 사실을 나타냄.
    * 최소 타입 : 함수가 계산을 끝마치지 못한다는 사실을 나타냄. ex) Nothing error(String msg){...}
    * 만들기 어려움. 아무렇게나 어느 곳에든 사용할 수 있다.  ex) 예외 발생, 무한 재귀 호출 등.

* 이거나 타입 (union type)
  * 타입 A와 B로 만든 이거나 타입은 A | B 라고 쓴다. = ‘A이거나 B를 나타낸다.’
  * 합집합 타입.
  * 주의할 점
    * 위치에 민감함 타입 검사(flow-sensitive type checking) 
      * 해당 변수가 정의된 곳의 타입 표시만 보는 것이 아니라, 그 변수가 어디서 사용되는지도 고려하는 것.
      * 프로그램이 복잡해지면 위치로부터 정보를 얻을 수 없게 된다는 한계가 있음.

        ∴  위치에 민감한 타입 검사가 잘 작동하도록 프로그램의 구조를 단순하게 만들어야 한다.

* 이면서 타입 (intersecton type)
  * 다중 상속(multiple inheritance)을 다룰 때 유용.
    * 다중 상속 = 한 클래스가 여러 클래스를 직접 상속하는 것을 말함.
    * 교집합 타입.
    * A & B = ‘A이면서 B’를 나타냄. 어떤 값이 A에도 속하고 B에도 속해야지만 A & B에 속한다. = A이면서 B이면 A & B인 것.


## 2.3 함수와 서브타입

* 함수와 서브타입
  * 함수를 값으로 사용한다. → 일급함수 (first-class function)
    = 함수를 변수에 저장한다.
    = 다른 함수에 인자로 전달.
    = 다른 함수에서 반환한다.
  * 함수 타입은 ‘매개변수 타입’과 ‘결과 타입’을 차례로 쓴 것. ex) Int => String
  * A가 B의 서브타입일 때, C => A가 C => B의 서브타입.
    = 함수 타입은 결과 타입의 서브타입 관계를 유지한다.
  * A가 B의 서브타입일 때 B => C 가 A => C의 서브타입.
    = 함수타입은 매개변수 타입의 서브타입 관계를 뒤집는다.

      ∴ 함수 타입은 매개변수 타입의 서브타입 관계를 뒤집고 결과 타입의 서브타입 관계를 유지한다.

