# 3장 매개변수에 의한 다형성

## 3.1 제네릭 함수

* 매개변수에 의한 다형성 (parametric polymorphism)
  * 타입 매개변수를 통해 다형성을 만드는 기능 = 제네릭스(generics).
  * 값이 아닌 타입을 인자로 받아야 한다는 것.
  * 타입 매개변수는 몸통뿐 아니라 매개변수 타입 표시와 결과 타입 표시에도 사용될 수 있다.
<br>
```
    T choose <T> (T v1, T v2){
      print(v1) ; print(v2); print(...);
      Int put = readInt();
      return (input == 0) ? v1 : v2;
    }
```
  * 제네릭 함수(generic function) 
    * 한 개 이상의 타입 매개변수를 가지는 함수.
  * T가 타입 매개변수일 때 함수 안에서 T 타입의 부품은 아무 특별한 능력도 요구되지 않은 곳에만 사용될 수 있음.
* 제네릭 메서드 (generic method)
  * 클래스 안에 정의된다는 점만 제외하면 제네릭 함수와 동일.
  * 제네릭 함수처럼 제네릭 메서드를 호출하려면 타입 인자를 넣어야 함. 
<br>
```
    Choose c = Choose(...);
    c.choose<Int>(1,2);
```
* 타입 인자 추론
  * 매개변수에 의한 다형성의 불편함을 해소하기 위해 타입 인자 추론 제공.
    * ‘매개변수에 의한 다형성’은 코드 중복을 크게 줄여 주는 장점이 있지만 꼬박꼬박 타입 인자를 써 줘야 한다는 단점이 있다. 
  * 타입 인자 추론
    * 타입 추론의 일종, 제네릭 함수나 제네릭 메서드를 호출할 때 개발자가 타입 인자를 생략할 수 있도록하는 기능.
  * 보통은 인자의 타입을 확인하는 것만으로 타입 인자를 알아낼 수 있음 → 타입 인자 추론 성공
  * 단점 : 코드가 복잡해지다 보면 타입 검사기가 타입 인자 추론에 실패할 수 있음. <br> 다른 타입이 타입인자로 사용되는 문제 → 해결책으로 생략한 타입 인자를 하나씩 다시 넣어 본다.
* 힌들리-밀너 타입 추론(Hindley-Milner type inference)
  * ≒ 렛 다형성(let polymorphism)
  * 타입 매개변수를 쓰지 않아도 함수가 자동으로 제넥릭 함수가 될 수 있다는 말. 
  * 매개변수 타입과 결과 타입까지도 추론.
  * 이해하기 어려운 오류 메세지가 나올 경우, 함수에 매개변수 타입 표시를 추가해 보는 것이 좋음.


## 3.2 제네릭 타입

* 제네릭 타입(generic type) : 타입에 타입 매개변수를 추가.
* List타입
  * 리스트의 타입 = List
  * List가 모든 리스트를 포함하는 타입이다. → 정수의 리스트일 수도 있지만, 문자열의 리스트일 수도 있다.
  * 리스트 타입이 타입 하나를 타입 인자로 받음으로써 ‘무엇’의 리스트를 나타내는지 결정하도록 하는 것.
  * List<A> → 타입 인자를 하나 받아 타입을 만드는 ‘제네릭 타입.’ 
  * 제네릭 함수는 제네릭 타입을 다룰 때 특히 더 유용.
* Map(맵)
  * 사전(dictionary)이라고도 하는 자료 구조.
  * 맵의 가장 중요한 기능은 주어진 열쇠에 대응되는 값을 알려주는 것.
  * Map<A,B> 형태 → 맵 역시 제네릭 타입으로 표현.

→ 자료 구조의 타입이 대개 제네릭 타입이다.

* 제네릭 클래스(generic class)
  * 타입 매개변수를 가진 클래스.
  * 정의할 때는 제네릭 함수와 비슷하게 타입 매개변수를 명시해야함.
  * 사용할 때는 제네릭 타입으로서 리스트나 맵과 비슷한 방식으로 사용됨.

