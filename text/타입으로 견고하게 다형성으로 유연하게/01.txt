# 추천사
- 각자 해결하고자 하는 문제에 제일 적합한 언어를 선택해 사용하면 된다.
- 프로그래밍 언어의 성질 중 가장 중요한 성질이 무엇이냐? ‘타입 검사’
  - 타입 검사 : 프로그램이 제대로 동작할지를 프로그램 실행 전에 자동으로 미리 검사해 주는 기능.
  - 타입 검사를 통과한 후에는 프로그램이 올바르게 동작한다는 것을 보장 → 매우 큰 도움

  

# 시작하며
* 타입검사를 잘 활용하는 능력 = 개발자의 필수 소양
* 타입검사 장담점을 알아야 장점을 키우고 단점을 줄일 수 있다.
  * 음차 : 어떤 언어의 소리를 그 언어에서 사용하지 않는 다른 문자로 표기하는 일



# 1장 타입 검사 훑어보기
## 1.1 타입 검사의 정의와 필요성 
* 타입검사는 불편 → 감수할 만큼 큰 가치가 있다.
* 버그(Bug) : 프로그램이 개발자의 의도 다르게 동작하는 모든 경우
  * 버그의 가장 흔한 오류 = 타입 오류(type error)
    * 타입이 무엇인지 먼저 알아야 ‘타입 오류’를 알 수 있다.
      * 타입 : 프로그램에 존재하는 값(value)들을 그 능력에 따라 분류하는 것
        * 값(value) : 정수, 문자열, 리스트, 불(boolean)

* 타입검사기(type checker) 사용
  *  '1. 통과 2.거부'
    * 이상적 → 통과  = 통과, 거부 = 거부
    * 현실적 → 통과 = 통과 or 거부 , 거부 = 거부
      * 그래도 다행인 점은, 타입안정성(type safety) = 타입검사기가 ‘통과’라고 했다면 프로그램을 타입 오류없이 안전하게 실행할 수 있다.
      * 거부 = ‘거부 + 오류메세지’ 알려줌.


## 1.2 정적 타입 언어
* 정적 타입 언어(statically typed language)
  * ‘프로그램을 실행하기 전에’
  * 타입검사 후 실행
  
* 동적 타입 언어(dynamically typed language)
  * 타입검사기가 없음 → 프로그래밍을 실행하기 전에 타입검사할 수 X
  * ‘프로그램을 실행하는 중에’