1장 타입 검사 훑어보기


1.5 타입 추론 (type inference)

* 정적 타입 언어의 불편한 점 → ‘타입표시’
* 타입추론 = 타입 표시 없이도 타입검사를 할 수 있는 기능
* 타입표시의 장점
  * 더 많은 정보를 담는다.
    * 코드의 가독성이 높아짐.
    * 매개변수 타입과 결과 타입이 표기되어 몸통을 보지않고도 타입을 알 수 있다.
  * 언제나 올바른 정보 제공 = 낡지 않는 주석
    * 타입표시 개념이 없는 ‘동적 타입언어’에 주석을 달면 해결? → 주석이 틀리 수도 있다는 단점.

* 타입추론이 중요한 이유
  * 타입표시 생략 가능.
  * 타입표시의 번거로움을 줄여줌

* 변수의 타입추론
  * 변수에 초깃값을 준다. → var num 1 + 2;

* 함수의 타입추론
  * 변수와 달리 타입추론이 쉽지 않음.
  * 매우 제한적인 경우에만 생략 가능
    ex) 오캐멀, 하스켈
  * 타입추론이 타입검사결과에 영향을 주지 않음
    * ≒ 타입표시가 있을 때도 검사를 통과할 프로그램에 한 해 타입표시를 생략할 수 있게 해준다.
    * 거부를 통과로 만들어주지는 못함.

* 타입추론의 장점
  * 타입추론의 원리를 이해하지 못해도 혜택을 받는다.

* 타입추론의 단점
  * 언어마다 다르다.
  * 정적타입언어에서는 타입추론이 ‘양날의 검’ → 과유불급. 타입 표시를 적절히 활용.


1.6 더 세밀한 타입

* 타입검사기의 목적
  * 버그를 자동으로 찾는다. (타입오류로 인한 버그 찾기)

* 타입검사기의 문제
  * 타입 오류가 원인이 아닌 버그는 찾을 수 없다.
    * 타입이 맞아도 실패할 수 있는 계산들 
     → ex) int x =1 / 0; (0도 정수 but 나누기 오류 발생)
    * null 접근 
     → null은 부재를 나타내기 위해 사용. null을 직접적으로 사용하려들면 오류 발생. 
          ex) null을 이용해 null 찾기.

* 타입검사기의 분류
  * 타입(type) : 프로그램에 존재하는 값들을 그 능력에 따라 분류한 것.
  * 대강 분류  ←—-————————————————→  세밀하게 분류
    ex) 코틀린은 null이 타입검사기에서 걸린다.
       why? 더 세밀하게 값을 분류하기 때문. 
       자바에서는 null이 String으로 들어가지만 코틀린에서는 String타입 값이 아니다.
    * 세밀한 분류에도 장단점이 있다.
      * null 사용이 자유롭지 못하고 제약이 추가됨.
      * 언어 설계자가 버그 찾기에 가치를 둘 경우 세밀하게 분류.

* 의도한 동작과 다르게 작동한 버그를 찾는 타입 검사.
  * 개발자가 원하는 동작을 타입으로 표현, 타입 검사기로 프로그램이 의도대로 동작한다는 사실을 검증
    * 정교한 타입 검사기가 필요 + 값을 세밀하게 분류해야 한다. → 이것이 가능한 대표적 언어 ‘콕(Coq)’


1.7 정적 타입 언어의 장단점

* 정적 타입 언어의 특징
  * 장점
    * 프로그램의 모든 타입오류를 찾을 수 있음
    * 생산성이 높아짐, 성능이 좋아짐
    * 가독성 높임
    * 큰 프로그램을 만들 때 유용
      * 큰 프로그램은 정적, 작은 프로그램은 동적으로 만드는 게 유용
        * 사례 : 트위터 , 동적언어(루비) → 정적언어(스칼라)
  * 단점
    * 코드가 장황해짐.
    * ‘거부’라고 틀리게 말하는 경우.


1.8 다형성

* ‘다형성’은 안전한 기능의 대부분을 차지하는 개념.
  * 타입 검사기가 ‘거부’라고 잘못 말하는 상황을 해결하는 두 가지 종류
    * ‘안전한’  기능
      * 타입 검사의 틀 안에서 개발자를 돕는 ‘안전한’ 기능.
      * 타입 검사의 원칙(타입 오류가 일어날 수 있을 것 같으면 ‘거부’를 출력한다.)을 지키면서 타입 검사기의 오판을 줄여줌.
    * ‘위험한’ 기능
      * 타입 검사를 무력화함.
      * 타입 검사기가 오류가 일어날 수 있다고 판단했음에도 그냥 ‘통과’라고 출력.
        ex) 코틀린의 !!연산자 → !!을 사용해 타입 검사기가 널을 String타입의 값을 취급하도록 강제.
      * 위험한 기능을 사용하지 않는 것이 바람직.
      * 최후의 비상수단.

* 다형성은 프로그램의 한 개체가 여러 타입에 속하게 만든다.

* 장점
  * 타입 안전성을 해치지 않으면서 타입 검사기의 오판을 줄인다.
  * 개발자가 쉽게 이해할 수 있는 오류 메시지를 제공.
  * 다형성을 잘 안다 = 정적 타입 언어 전문가.
  
* 분류
  * 서브타입에 의한 다형성.
  * 매개변수에 의한 다형성.
  * 오버로딩에 의한 다형성.

