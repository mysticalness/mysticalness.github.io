# 4장 두 다형성의 만남

## 4.3 가변성

* 가변성(variance)
  * 제네릭 타입과 타입 인자 사이의 관계를 뜻함.
* 가변성의 세 종류
  * 공변(Covariance)
    * 제네릭 타입이 타입 인자의 서브타입 관계를 보존하는 것.
    * 타입 인자가 A에서 서브타입인 B로 변할 때, List<A> 역시 서브타입인 List<B>로 변한다.
      = 제네릭 타입이 타입 인자와 ‘함께 변한다.’
  * 불변(invariance)
    * 제네릭 타입이 타입 인자의 서브타입 관계를 무시하는 것.
    * B가 A의 서브타입이더라도 List<B>와 List<A>가 다른 타입인 것.
      = 타입 인자가 서브타입으로 변해도 제네릭 타입은 서브타입으로 ‘안 변한다’는 뜻.
  * 반변(contravariance)
    * 제네릭 타입이 타입 인자의 서브타입 관계를 뒤집는 것.
    * 결과 타입을 C로 고정할 때, B가 A의 서브타입이면 B => C는 A => C의 슈퍼타입.

    → 함수 타입은 매개변수 타입에 대해서는 반변, 결과 타입에 대해서는 공변.
    → G(제네릭 타입)가 T(타입 매개변수)

      - G가 T를 출력에만 사용하면 ‘공변’. G의 메서드 중 결과 타입이 T인 메서드가 있다.
      - 입력에만 사용하면 ‘반변’. G의 메서드 중 매개변수 타입이 T인 메서드가 있다.
      - 출력과 입력 모두에 사용하면 ‘불변’

    → 타입 매개변수를 사용한 곳에 따라 가변성이 정해진다.

* 가변성 판단 방법

  1. 정의할 때 가변성 지정하기

    * 가변성은 각 제네릭 타입의 고유한 속성
    * 개발자는 제네릭 타입의 각 타입 매개변수에 가변성을 표시함으로써 공변, 반변, 불변 중 하나를 고를 수 있음.
    * 불변
      * 아무런 표시도 붙이지 않을 경우 기본으로 불변이 선택.
      * 불변인 타입 매개변수는 입력과 출력에 모두 사용할 수 있음.
    * 공변
      * out : 해당 타입 매개변수가 출력에만 사용됨을 뜻함.

        abstract class ReadOnlyList<out T> {
          T get(Int idx);
        }

        * ReadOnlyList는 T를 get의 결과 타입으로만 사용하므로 이 조건을 만족.
        * ReadOnlyList는 공변이므로 타입 인자의 서브타입 관계를 보존.
    * 반변
      * in : 타입 매개변수를 입력에만 사용한다는 뜻.

        abstract class Map<in T,S>{
          S get(T t);
          Void add(T t, S s);
        }

        * T는 열쇠의 타입, S는 열쇠에 연결된 값의 타입.
        * T는 입력으로만 사용되었기에 ‘반변’으로 정의해도 타입 검사기가 문제 삼지 않음.
        * S는 get에서는 출력, add에서는 입력에 사용되므로 반드시 ‘불변’
    * 정의할 때 가변성을 지정하는 방법은 이해하기 쉽지만 클래스를 정의할 때 큰 제약이 생긴다는 문제가 있음.

  2. 사용할 때 가변성 지정하기

  * 정의할 때 가변성을 지정하는 방법을 사용했을 경우, 사용할 때 가변성을 지정할 수 없음.

        abstract class List<T> {
          T get(Int idx);
          Void add(T t);
        }

    * 공변
      * 타입 인자에 out을 붙인다.
      * List<out A>
      * 출력 기능만 사용할 수 있다.
      * List가 제공하는 메서드 중 원소 타입이 매개변수 타입으로 사용되지 않는 메서드만 사용할 수 있다. 
    * 반변
      * 타입 인자에 in을 붙인다.
      * List<in A>
      * List의 입력 기능만 사용할 수 있다.
      * List의 메서드 중 원소 타입이 결과 타입으로 사용되지 않는 메서드만 사용할 수 있음.

  → 제네릭 타입을 사용할 때 가변성을 지정하면 제네릭 타입을 자유롭게 정의할 수 있다.

    