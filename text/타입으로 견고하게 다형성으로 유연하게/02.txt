# 1장 타입 검사 훑어보기

## 1.3 타입 검사의 원리

* 타입 검사기의 오류를 이해하기 위해서는 ‘타입 검사기의 작동 원리’를 알아야한다.
    * ex) 자동차 부품 검사
      * ‘기본’ 부품 : 더는 쪼갤 수 없는
      * ‘복합’ 부품 : 여러 작은 부품을 결합한
        1. 복합 부품을 구성하는 작은 부품의 올바른 사용 확인
        2. 복합 부품 정보 확인
     * 복합 부품 검사를 반복
        1. ‘작은 부품에서 큰 부품으로’
        2. 타입 검사도 작은 → 큰 순서로 프로그램 검사

* 리터럴
  * 정수리터럴 =기본 부품
    * 모든 리터럴은 기본 부품이니 타입만 찾는다.
  * 정수 타입 =리터럴 타입 : 정수 타입과 리터럴 타입은 같아야 한다.

* 덧셈
  * a + b  → 복합 부품
    * a와 b는 기본 부품 혹은 복합 부품
        ex) 5 + 7 , ( 2 + 3 ) + 4 
  * ‘작은 부품에서 큰 부품’의 규칙에 따라
    * a와 b를 검사 
      1.  a와 b, 각각의 타입을 알아냄
    * a + b 검사
      1. 이미 a와 b의 타입을 알고있다.
      2. a와 b 타입이 올바른지 검사
      3. 결과 타입 검사 → 통과 또는 거부

* 삼항연산자(ternary operator)
  * a ? b : c
    * a, b, c 각 타입이 올바른지 확인.
    * a는 Boolean 타입이어야 함.
    * b타입과 c타입은 같아야한다.
    * 타입 검사기는 언제나 각 부품의 타입만 신경쓴다. 계산 결과를 절대 알려하지 않는다.

* 변수
  * 변수나 함수의 경우는 개발자가 직접 정의해야만 사용할 수 있다.
  * 변수 사용방식 
    * 변수의 값을 읽는다.
      1. 기본 부품 → 부품 타입만 알아내면 된다.
      2. 변수이름에서 타입을 알아낼 수 없다.
        * 타입표시(type annotation)을 해야한다. → Int res;

            - 중요한 것은 코드의 생김새가 아니다. 변수를 정의할 때 그 변수의 타입을 명시해야하는 사실 중요하다!

    * 변수에 새로운 값을 쓴다.
      * x = a → 복합 부품
          1. x와 a 타입이 올바른지 확인
          2. x타입과 a타입이 같아야한다.

* 함수
  * 함수 호출 형태 = f(a)
    * f = 함수이름
    * a = 인자값, 0 ~ n개
    * 함수 타입
      * 매개변수타입(parameter)
      * 결과타입(return type)
    * Boolean isPositive (int num) { return num > 0;}
      * Booelan : 결과 타입 = 함수가 반환할 값의 타입
      * int : 매개변수타입 = 함수가 인자로 받을 값의 타입
      * return num > 0; = 몸통 (Body)

  * 고려 사항
    * 인자 타입과 매개변수타입이 일치하는가.
    * 함수타입은 결과타입이 결정한다.

  * 검사 이유
    * 몸통에서 타입오류를 발생시킬 수 있다.
    * 개발자가 제공한 결과 타입이 올바른지 확인하기 위해.
      * 함수가 반환하는 값이 주어진 결과 타입과 일치하는지 확인.
      * 함수가 어떠한 값도 반환하지 않는 경우,
        * 결과 타입 = void
        * 리턴값 = return;
        * void로 얻은 결과를 어딘가에 사용하려면 타입 검사를 통과하지 못함.

  * 함수가 여러 인자를 받을 수 있는 경우,
    * 인자 개수만 다를 뿐 인자가 하나일 때와 동일한다.
      * 고려사항
        * 인자 개수와 매개변수 개수가 일치하는가.
        * 인자타입과 매개변수타입이 일치하는가.

* 타입 검사기의 작동원리를 이해하면 오류메세지는 쉽게 이해할 수 있다.


## 1.4 타입 검사 결과의 활용

* 코드편집기(code editor)
  * 타입검사기가 코드편집기의 기능을 보조 → 개발자의 생산성을 높임.
  * 자동완성기능
    * 변수, 함수, 메서드 등의 이름을 완벽하게 알아야 할 필요가 없어서 시간 단축.
    * 정적 타입 언어를 사용해야 자동완성기능의 혜택을 최대로 누릴 수 있다.
  * 이름 바꾸기
    * 리팩터링(refactoring) 할 때 많이 사용.
    * 한 곳에서 이름을 바꾸면 같은 이름이 사용된 곳의 이름도 함께 바뀐다.
    * 다름 타입 + 같은 이름일 경우,
      * 동적 타입 : 같은 이름을 모두 바꿔버림.
      * 정적 타입 : 타입 검사기를 사용하여 코드가 망가지는 일 없이 이름 수정 가능.

* 프로그램 성능
  * 정적 타입 언어는 성능이 뛰어나다. = 프로그램의 실행 시간이 짧다.
    * 정적 타입 언어는 실행 중 추가 검사가 없고 동적 타입 언어는 실행 중에 진행되는 숨겨진 검사가 있다. → 정적 타입 언어가 성능면에서 우월하다.

