# 들어가며 

## 왜 리액트인가?
* 출시된지 10년이 넘은 라이브러리
* 전자정부 표준 프레임워크 프런트엔드 개발 도구로 채택 = 안정성이 확보됐다.
* 리액트를 선호하는 이유
  * 명시적인 상태 변경
    * 리액트는 단방향 바인딩만 지원
  * JSX(JavaScript XML)
    * JSX : HTML + JavaScript 문법
  * 비교적 배우기 쉽고 간결
  * 강력한 커뮤니티와 메타의 적극적인 지원

> "가장 대중적으로 웹사이트를 개발하고 싶다면, 리액트"
  

## 리액트의 역사

* 2010년대 프런트엔드 개발 환경을 향한 페이스북의 도전
  * JS → BoltJS → 리액트


### 리액트의 장점
  * 코드크기 감소
  * 손쉽게 코드 작성 가능
  * 빠른 기능 추가 → 빠른 빌드

> 넷플릭스의 리액트 도입으로 리액트가 프런트엔드 시장에 전성기를 맞는다.


#### 리액트와 함께하는 라이브러리
  * 상태 관리 : Redux, Zustand 등
  * 서버 사이드 렌더링 : Next.js, Remix 등
  * 애니메이션 : Framer Motion, react-spring 등
  * 차트 : Recharts, visx 등
  * 폼 : React Hook, Form 등

### 리액트의 현재와 미래
* 국내 IT 업계의 리액트를 주력으로 사용하는 추세
  *  토스(리액트 주력), slash(일부 리액트향 라이브러리 제공), 카카오톡, 네이버 등
*  과거 리액트 → 클라이언트에 초점
*  현재 리액트 → 서버에서 작동할 수 있는 다양한 기능, 유스케이스를 추가할 것으로 보임.