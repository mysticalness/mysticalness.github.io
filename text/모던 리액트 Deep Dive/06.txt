## 이벤트 루프와 비동기 통신의 이해

* 동기(synchronous)
  - 직렬
  - 순서상관있음.
  - 한 번에 다양한 작업 안됨.

* 비동기(asynchronous)
  - 병렬
  - 순서상관없음.
  - 한 번에 여러 작업 가능.



>  자바스크립트? 싱글 스레드, 동기 방식 but 비동기 통식 방식 존재



### 싱글 스레드 자바스크립트



* 프로세스(process) : 프로그램을 구동해 프로그램의 상태가 메모리상에서 실행되는 작업 단위
* 스레드(thread) : 하나의 프로세스에 여러 개의 스레드. 스레드끼리 메모리 공유 가능 -> 여러 가지 작업 동시 수행 할 수 있다.

  * 스레드가 나온 이유? 하나의 프로그램이 여러 개의 복잡한 작업을 수행하기 위해서.





* 자바스크립트는 왜 싱글 스레드로 설계 되었나?

      
  일단, 멀티 스레드의 단점을 알아야 한다.
  멀티 스레드의 단점.
  1. 내부적으로 처리가 복잡하다.
  2. 동시성 문제가 발생 (같은 자원에 대한 여러번의 수정)
  3. 하나의 스레드가 문제가 생길 시, 다른 스레드에도 영향을 미친다.



* 자바스크립트의 역사

   간단하고 제한적인 수준으로 사용하기 위해 탄생


* 자바스크립트 특징

   "Run-to-completion" : '동기식' 한 번에 하나씩 순차적으로 처리




비동기 코드 처리 방식? 이벤트 루프를 알아야 한다.
### 이벤트 루프란?

* 이벤트 루프 : 자바스크립트 엔진 외부에서 비동기 실행을 돕는 장치



* 호출 스택과 이벤트 루프

  * 호출 스택(call stack) : 자바스크립트에서 수행해야 할 코드나 함수를 순차적으로 담아두는 스택
이벤트 루프 : 호출 스택이 비어있는지 여부를 확인하는 것. 태스크 큐에 대기 중인 함수가 있는지 반복해서 확인하는 역할


  * 호출 스택이 비어있다? 태스크 큐에 대기 중인 작업이 있는지 확인. 작업을 실행 가능한 가장 오래된 것부터 순차적으로 꺼내와서 실행. 태스크 큐가 비어질 때까지. -> 자바스크립트 메인 스레드에서 이루어 지는 게 아니라 자바스크립트 외부에서 실행



  * 태스크 큐 : 실행해야 할 태스크의 집합(비동기 함수의 콜백 함수나 이벤트 핸들러 등을 의미) , set형태




태스크 큐의 구조는?
### 태스크 큐와 마이크로 태스크 큐


- 태스크 큐 != 마이크로 태스크 큐
- 마이크로 태스크 큐  
 이벤트 루프 = 하나의 마이크로 태스크 큐를 가지고 있다.
 기존의 태스크 큐보다 우선권을 갖는다.
 ex) Promise



  * 동기 코드, 태스크 큐, 마이크로 태스크 큐, 모두 동시 실행의 관계
    - 동기 코드 : for문이 다 돌면 렌더링
    - 태스크 큐: setTimeout 1부터 반복문이 끝날 때까지 순차적으로 렌더링
    - 마이크로 태스크 큐 : 동기와 마찬가지로 반복문이 다 돌면 렌더링
    - 모두 동시 실행 : 동기, 마이크로 태스크 큐만 한 번에 반복문이 끝나고, 태스크 큐는 순차적으로 렌더링. 


- 렌더링 순서 : 마이크로 태스크 큐 -> 렌더링 -> 태스크 큐
   마이크로 태스크 큐가 끝날 때마다 한 번씩 렌더링할 기회를 얻는다.