## 상태 관리는 왜 필요한가?
* 상태
  * 어떤 의미를 지닌 값
  * 애플리케이션의 시나리오에 따라 지속적으로 변경될 수 있는 값
  * 분류
      * UI
      * URL
      * 폼(form)
      * 서버에서 가져온 값

### 리액트 상태 관리의 역사
 * Flux패턴의 등장
   * 단반향 데이터 바인딩
   * 액션(action)+데이터 → 디스패치(dispatcher) → 스토어(store) → 뷰(view)
   * 데이트의 흐름을 추적하기 쉽고 이해하기가 한결 수월

 * 시장 지배자 리덕스(Redux)의 등장
   * Elm 아키텍처를 도입
      * 정의
          * Elm : 웹페이지를 선언적으로 작성하기 위한 언어
      * 핵심
          * 모델(model), 뷰(view) , 업데이트(update)
    
   * context API와 useContext
    * Context API
      * 전역 상태를 하위 컴포넌트에 주입
      * props로 상태를 넘겨주지 않아도 원하는 곳에 Context Provider가 주입하는 상태를 사용할 수 있게 됨.
      * 상태 관리가 아닌 주입을 도와주는 기능
      * 렌더링을 막아주는 기능이 존재하지 않음
    * Context
      * 컴포넌트와 결합도가 높아지는 단점을 해결하기 위해 나옴.

 * 훅의 탄생, 그리고 React Query와 SWR
   * 훅 API
     * state를 매우 손쉽게 재사용 가능하도록 만들 수 있다.
   * SWR, React Query도 상태 관리 라이브러리의 일종