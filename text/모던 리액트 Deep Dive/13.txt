## 컴포넌트와 함수의 무거운 연산을 기억해 두는 메모이제이션

### 주장1 : 섣부른 최적화는 독이다. 꼭 필요한 곳에만 메모이제이션을 추가하자
* 메모이제이션과 리렌더링 
  * 비용, 속도의 문제가 있다.
  * 상황에 따라 비용과 속도문제가 다르다.
  * 메모이제이션이 모든 문제를 해결할 수 있지는 않다.
  * 메모이제이션으로 

### 주장2 : 렌더링 과정의 비용은 비싸다. 모조리 메모리제이션해 버리자.
* 실무에서는 개발자들이 최적화나 성능 향상에 쏟을 시간이 많지 않다.
* memo를 하지 않았을 때 발생할 수 있는 문제
  * 렌더링을 함으로써 발생하는 비용
  * 컴포넌트 내부의 복잡한 로직의 재실행
  * 그리고 위 두 가지 모두가 모든 자식 컴포넌트에서 반복해서 일어남.
  * 리액트가 구 트리와 신규 트리를 비교
* 결론, 메모이제이션은 하지 않는 것보다 메모이제이션했을 때 더 많은 이점을 누릴 수 있다.
* 실수로 메모이제이션을 빠뜨렸을 경우, 치러야 할 위험 비용이 더 크다.
* 때문에, 확신이 없다면 가능한 모든 곳에 메모이제이션을 활용한 최적화를 하는 것이 좋다.


### 정리
1. 시간적 여유가 있다면, 섣부른 메모이제이션은 지양. 성능상 이점을 누를 수 있는 지점을 살펴본 후, 메모이제이션 적용.
2. 현업에서 리액트를 사용하고 있거나 다룰 예정일 경우,
   성능에 대해 깊게 연구할 시간적인 여유가 없을 경우,
   의심스러운 곳에는 메모이제이션을 모두 적용.