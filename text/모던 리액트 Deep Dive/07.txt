## 리액트에서 자주 사용하는 자바스크립트 문법

* 자바스크립트의 문법을 이해하면? 리액트가 어떻게 동작하는지 이해 가능
* 바벨 : 자바스크립트의 최신 문법을 다양한 브라우저에서도 일관적으로 지원할 수 있도록 코드를 트랜스파일.


### 구조 분해 할당 (Destructuring assignment)

* 배열 또는 객체의 값을 분해 → 개별 변수에 즉시 할당


* 배열 구조 분해 할당 (p.81 소스코드 참조)
		
  - ,의 위치에 따라 값이 결정
  - 기본값을 선언 가능
  - undefined일 때만 기본값을 사용
  - 전개연산자(...)으로 모든 값을 변수에 배열로 넣는 것이 가능


* 객체 구조 분해 할당 (p.83 소스코드 참조)
	- 객체에서 값을 꺼내온 뒤 할당하는 것을 의미
	- 이름으로 꺼내온다.
	- 새로운 이름으로 다시 할당 가능	
	- 기본값 주는 것도 가능
	- 리액트 컴포넌트인 props에서 값 추출할 경우, 사용
	- 계산된 속성 이름 방식으로도 가능 
	- 전개연산자로 나머지 값 가져오는 것이 가능
	- 전개연산자 사용 시, 순서 중요


### 전개 구문 (Spread Syntax) 
  (p.88 소스코드 참조)
		
  * 배열, 객체, 문자열같이 순회할 수 있는 값에 대해 전개 → 간결하게 사용
	
	* 배열의 전개 구문
		* 배열 합성
		* 배열 내부에 ...배열 사용
		
	* 객체의 전개 구문
		* 객체 합성
		* 순서 중요 → 순서 차이로 전혀 다른 객체 생성


> 객체 전개 연산자 또한 객체 구조 분해 할당처럼 트랜스파일되면 상대적으로 `번들링이 커지기 때문에` 사용할 때 주의할 필요!



### 객체 초기자 (object shorthand assignment)

```
const a = 1;
const b = 2;

const obj = {
  a,
  b,
}

// { a: 1, b: 2}
```



### Array 프로토타입의 메서드 : map, filter, reduce, forEach

* 배열에 관련된 메서드
  Array.prototype.map
  Array.prototype.filter
  Array.prototype.reduce

  → 기존값 유지, 새로운 값 생성, 안정성 있음.

* Array.prototype.map
  * 새로운 배열 반환 (인수로 받은 배열과 똑같은 길이)

* Array.prototype.filter
  * 필터링 역할
  * 새로운 배열 반환 (원본 길이 이하)
  
* Array.prototype.reduce
  * 초깃값 += 콜백의 반환값
  * map, filter의 작동을 reduce 하나로 구현 가능

* Array.prototype.forEach
  * 반환값 없음
  * 배열 순회를 멈출 수 없음 (break, return x)



### 삼항 조건 연산자

* 조건문 ? 참일 때 값 : 거짓일 때 값
* 중첩 가능
  * 조건문? 참일 때 값 : 조건문? 참일 때 값 : 조건문 ? 참일 때 값 : 거짓일 때 값


