## 서버 사이드 렌더링

### 싱글 페이지 애플리케이션의 세상
* 싱글 페이지 애플리케이션 ↔ 서버 사이드 렌더링
* 싱글 페이지 애플리케이션(Single Page Application: SPA)이란?
 * 렌더링과 라우팅에 필요한 대부분의 기능을 서버가 아닌 브라우저의 자바스크립트에 의존하는 방식
 * 페이지 전환을 위한 모든 작업 → 자바스크립트, 브라우저의 history.pushState, history.replaceState로 이루어짐.
 * 하나의 페이지에서 모든 작업을 처리 = 싱글 페이지 애플리케이션
 * 최초에 서버에서 최소한의 데이터를 불러온 이후부터는 이미 가지고 있는 자바스크립트 리스소와 브라우저 API를 기반으로 모든 작동이 이루어짐.
 * 서버를 거쳐 리소스를 받아올 일이 적다 → 사용자에게 훌륭한 UI/UX를 제공한다는 장점


* 전통적인 방식의 애플리케이션과 싱글 페이지 애플리케이션의 작동 비교
 * 전통적인 방식의 애플리케이션
    * ex) 네이버
  * 싱글 페이지 애플리케이션
    * ex) 구글


* 싱글 페이지 렌더링 방식의 유행과 JAM 스택의 등장
 * 싱글 페이지 렌더링 방식의 등장 배경
    * CommonJS와 AMD(Asynchronous Module Definition)의 등장
    * 자바스크립트 모듈화의 결실
    * 사용자 기기의 성능 향상
    * 인터넷 속도의 발전
    * BackBone.js와 AngularJS, Knockout.js 등의 등장 → 서버에서만 할 수 있던 복잡한 작업이 가능.
    * 자바스크립트의 역할과 규모가 커짐
* JAM 스택
  * JAM(Javascript, API, Markup) 스택
    * 서버 확장성 문제에서 좀 더 자유로워짐.


### 서버 사이드 렌더링이란?
* 싱글 페이지 애플리케이션과의 차이
   * 웹페이지 렌더링의 책임을 어디에 두느냐
      * 싱글 페이지 애플리케이션 : 자바스크립트 번들, 사용자 기기의 성능에 영향을 받는다.
      * 서버 사이드 렌더링 : 서버, 안정적인 렌더링이 가능

* 서버 사이드 렌더링의 장점
  * 최초 페이지 진입이 비교적 빠르다.
     * First Contenful Paint
  * 검색 엔진과 SNS 공유 등 메타데이터 제공이 쉽다.
  * 누적 레이아웃 이동이 적다
     * 누적 레이아웃 (Cumulative Layout Shift) : 뒤늦게 HTML 정보가 추가,삭제가 되는 등의 부정적인 사용자 경험
  * 사용자의 디바이스 성능에 비교적 자유롭다.
     * 서버에 부담을 나눌 수 있다.
  * 보안에 좀 더 안전하다.
     * 민감한 작업을 서버에서 수행

* 서버 사이드 렌더링의 단점
  * 소스코드를 작성할 때 항상 서버를 고려해야 한다.
     * window에 대한 접근을 최소화
  * 적절한 서버가 구축돼 있어야 한다.
  * 서비스 지연에 따른 문제
     * 렌더링 작업이 끝날 때까지 사용자에게 정보를 제공할 수 없다.



### SPA와 SSR을 모두 알아야 하는 이유
* 서버 사이드 렌더링 역시 만능이 아니다.
  * 웹페이지에서 사용자에게 제공하고 싶은 내용은 무엇인지 중요
  * 어떤 우선순위에 따라 페이지의 내용을 보여줄지를 잘 설계하는 것이 중요.

* 멀티 페이지 애플리케이션
  * 가장 뛰어난 싱글 페이지 애플리케이션은 가장 뛰어난 멀티 페이지 애플리케이션보다 낫다.
  * 평균적인 싱글 페이지 애플리케이션은 평균적인 멀티 페이지 애플리케이션보다 느리다.

* 현대의 서버 사이드 렌더링
  * 요즘의 서버 사이드 렌더링은 싱글 페이지와 서버 사이드의 장점을 모두 취한 방식으로 작동
  * 최초 웹사이트 진입 시에는 서버 사이드 렌더링 방식으로 서버에서 완성된 HTML을 제공 받는다.
  * 이후에 라우팅에서는 서버에서 내려받은 자바스크립트를 바탕으로 마치 싱글 페이지 애플리케이션처럼 작동.


  


