
## 렌더링은 어떻게 일어나는가?

1. 브라우저의 렌더링
	* HTML과 CSS 리소스를 기반으로 웹페이지에 필요한 UI를 그리는 과정
2. 리액트의 렌더링
	* 브라우저가 렌더링에 필요한 DOM 트리를 그리는 과정
	* 시간과 리소스를 소비해 수행하는 과정 -> 비용은 사용자에게 청구


### 리액트의 렌더링이란?
* 리액트 애플리케이션 트리 안에 있는 모든 컴포넌트들이 현재 자신들이 가지고 있는 props와 state의 값을 기반으로 어떻게 UI를 구성하고 이를 바탕으로 어떤 DOM 결과를 브라우저에 제공할 것인지 계산하는 일련의 과정
* props와 state와 같은 상태값을 가지고 있지 않다면? JSX 값에 기반해 렌더링이 일어남.

### 리액트의 렌더링이 일어나는 이유
1. 최초 렌더링
2. 리렌더링
  *  클래스 컴포넌트의 setState가 실행되는 경우
  * 클래스 컴포넌트의 forceUpdate가 실행되는 경우
  * 함수 컴포넌트의 useState()의 두 번째 배열 요소인 setter가 실행되는 경우
  * 함수 컴포넌트의 useReducer()의 두 번째 배열 요소인 dispatch가 실행되는 경우
  * 컴포넌트의 key props가 변경되는 경우



### 리액트 렌더링 프로세스
  *  컴포넌트의 루트에서부터 차근차근 아래쪽으로 내려가면서 업데이트가 필요하다고 지정돼 있는 모든 컴포넌트를 찾음
  * 업데이트가 필요하다고 지정된 컴포넌트 발견 
     → 클래스 컴포넌트 : render() 함수 실행
     → 함수 컴포넌트 : FunctionComponent() 그 자체를 호출
 
### 렌더와 커밋
  * 렌더 단계(Render Phase)
      * 컴포넌트를 렌더링하고 변경 사항을 계산하는 모든 작업
      * 렌더링 프로세스에서 컴포넌트를 실행 → 결과를 이전 가상 DOM과 비교한 후, 변경이 필요한 컴포넌트를 체크.
      * type, props, key 이 세가지 중 하나라도 변경된 것이 있으면 변경이 필요한 컴포넌트로 체크.

  * 커밋 단계(Commit Phase)
      * 렌더 단계의 변경 사항을 실제 DOM에 적용, 브라우저의 렌더링이 발생.

  * 리액트 렌더링이 일어난다고 해서 무조건 DOM 업데이트가 일어나는 것은 아니다!
    * 가시적인 변경이 일어나지 않아도 렌더링은 발생할 수 있다.