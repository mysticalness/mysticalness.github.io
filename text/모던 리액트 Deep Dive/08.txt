### 타입스크립트란?

- "TypeScript is JavaScript with syntax for types"
- 타입 체크를 정적으로 런타임이 아닌 빌드(트랜스파일) 타임에 수행할 수 있게 해줌.


  ```
  // Javascript : 동적 타입의 언어, 에러를 코드를 실행할 때만 확인 가능
  function test(a,b) {
    if ( typeof a !== 'number' || typeof b !== 'number') {
      throw new Error('a와 b 모두 숫자여야 합니다.')
    }
    return a / b
  }

  test('안녕하세요','하이')		// Uncaugth Error : a와 b 모두 숫자여야 합니다.
  ```

  ↓
  ```
  function test(a:number, b:number) {
    return a / b
  }

  // tcs로 이 코드를 자바스크립트로 트랜스파일하면 다음과 같은 에러가 난다.
  // Argument of type 'string' is not assignable to parameter of type 'number'.
  // 이 코드는 타입 문제가 해결되기 전까지 쓸 수 없다.
  test('안녕하세요','하이')	
  ```
	
<br>

### 리액트 코드를 효과적으로 작성하기 위한 타입스크립트 활용법


1.any 대신 unknown을 사용하자
- any를 사용한다는 것 = 타입스크립트가 제공하는 정적 타이핑의 이점을 모두 버리는 것
- 불가피할 경우, unknown을 사용.
	* unknown
		* top type : 모든 값 할당 가능
		* any와 다르게 바로 사용 불가능
		* type narrowing, 즉 타입을 원래 의도했던 대로 적절히 좁혀야 함.
			
	* never
		* unknown과 반대
		* bottom type : 어떠한 타입도 들어 올 수 없음.
		* 코드상으로 존재가 불가능한 타입

2.타입 가드를 적극 활용하자
  * 타입가드 : 타입을 좁히는 데 도움을 주는 것
  * 조건문과 함께 사용하면 타입을 효과적으로 좁힐 수 있음.


  * instanceof와 typeof
    * instanceof
      * 지정한 인스턴스가 특정 클래스의 인스턴스인지 확인할 수 있는 연산자
    
    * typeof
      * 특정 요소에 대해 자료형을 확인

    * in
      * property in object로 사용
      * 주로 어떤 객체에 키가 존재하는지 확인

3.제네릭(generic)
* 타입만 다른 비슷한 작업을 하는 컴포넌트를 `단일 제네릭 컴포넌트`로 선언해 간결하게 작성할 수 있음.
* 제네릭 하나 이상 사용 가능


4.인덱스 시그니처(index signature)
  * [key: string] → 키에 원하는 타입을 부여할 수 있음
  * 객체를 원하는 형태로 최대한 좁힐 수 있음

    * 덕 타이핑, 구조적 타이핑 : 타입 체크를 할 때 그 값이 가진 형태에 집중.



### 타입스크립트 전환 가이드

  * tsconfig.json 먼저 작성하기
  * jsDoc과 @ts-check를 활용해 점진적으로 전환하기
  * 타입 기반 라이브러리 사용을 위해 @types 모듈 설치하기
  * 파일 단위로 조금씩 전환하기
