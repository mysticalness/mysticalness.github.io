## 사용자 정의 훅과 고차 컴포넌트 중 무엇을 써야 할까?

* 재사용할 수 있는 로직을 관리할 수 있는 두 가지 방법
 * 사용자 정의 훅(custom hook)
 * 고차 컴포넌트(higher order component)


### 사용자 정의 훅

* 리액트에서만 사용할 수 있는 방식
* 사용자 정의 훅의 규칙 = 이름이 반드시 use로 시작하는 함수를 만들어야 한다는 것
* 복잡하고 반복되는 로직은 사용자 정의 훅으로 간단하게 만들 수 있다. = 중복되는 로직 관리

* 왜 use라는 이름을 지켜야 하는가?
 * 내부에서 useState와 같은 리액트 훅을 사용하고 있기 때문.
 * 리액트 훅의 규칙을 따르고 react-hooks/rules-of-hooks의 도움을 받기 위해서.
  * 이름을 useFetch에서 fetch로 바꾼 경우 → 에러


### 고차 컴포넌트

* 고차 컴포넌트(HOC, Higher Order Component)
 * 컴포넌트 자체의 로직을 재사용하기 위한 방법
 * 고차 함수(Higher Order Function)의 일종
 * 굳이 리액트가 아니더라도 자바스크립트 환경에서 널리 쓰일 수 있음.
 * 리액트에서 가장 유명한 고차 함수 ? React.memo

 * React.memo란?
   * 렌더링 이전, props를 비교해 이전 props와 같다면 렌더링 자체를 생략 → 이전에 기억해둔(memoization) 컴포넌트를 반환
   * 불필요한 렌더링 작업 생략.
   * PureComponent와 매우 유사
   * useMemo와 비교
      * useMemo의 경우, 값을 반환 → JSX 함수 방식이 아닌 `{ }`을 사용한 할당식을 사용한다.


  리액트의 함수 컴포넌트도 결국 함수이기 때문에 고차 함수 만들기를 먼저 이해해야 한다!!
  * 고차 함수 만들어보기
    * 고차 함수 
        * 함수를 인수로 받거나 결과로 반환하는 함수 → 완전히 새로운 결과를 만들어 낼 수 있음.



 * 고차 함수를 활용한 리액트 고차 컴포넌트 만들어보기
   * 고차 컴포넌트는 컴포넌트 전체를 감쌀 수 있다 → 사용자 정의 훅보다 더욱 큰 영향력을 컴포넌트에 미칠 수 있다.
   * 고차 컴포넌트는 컴포넌트의 결과물에 영향을 미칠 수 있는 다른 공통된 작업을 처리할 수 있다. = 중복처리
   * 고차 컴포넌트 구현 시 주의할 점
       * with로 시작하는 이름을 사용해야 한다. 
            * 리액트 커뮤니티에 널리 퍼진 일종의 관습!
            * with가 접두사로 있으면 손쉽게 고차 컴포넌트인 걸 알 수 있다.
   * 고차 컴포넌트를 사용할 시 주의할 점
	   * 부수효과를 최소화 해야 한다.
           * 여러 개의 고차 컴포넌트로 컴포넌트를 감쌀 경우, 복잡성이 커진다.
           * 고차 컴포넌트는 최소한으로 사용하는 것이 좋다.

### 사용자 정의 훅과 고차 컴포넌트 중 무엇을 써야 할까?

* 사용자 정의 훅이 필요한 경우
  * 단순히 useEffect, useState와 같이 리액트에서 제공하는 훅으로만 공통 로직을 격리 할 수 있다? 사용자 정의 훅.
   * 사용자 정의 훅은 렌더링에 영향을 미치지 못하기 때문.
  * 장점 : 컴포넌트 내부에 미치는 영향을 최소화해 개발자가 훅을 원하는 방향으로만 사용할 수 있다.
  * 결론, 단순히 컴포넌트 전반에 걸쳐 동일한 로직으로 값을 제공, 특정한 훅의 작동을 취하게 하고 싶다면 사용자 정의 훅을 사용하는 것이 좋다.

* 고차 컴포넌트를 사용해야 하는 경우
  * 함수 컴포넌트의 반환 값, 즉 렌더링의 결과물에도 영향을 미치는 공통 로직이라면? 고차 컴포넌트 사용.
  * 고차 컴포넌트가 많아질수록 복잡성이 기하급수적으로 증가 = 신중하게 사용해야 한다.